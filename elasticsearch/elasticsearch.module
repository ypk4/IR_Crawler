<?php
function elasticsearch_menu() {
    $items = array();

    $items['elasticsearch/search'] = array(
        'title' => 'Search COEP Website',
        'page callback' => 'perform_search',
        'access arguments' => array('access content'),
        //'type' => MENU_CALLBACK,
        'access callback' => TRUE
     );

    return $items;
}

function mylog($logstring){
    $logfile = fopen(drupal_get_path('module', 'elasticsearch').'/log.txt', 'a');
    fwrite($logfile, $logstring);
    fwrite($logfile, "\n");
    fclose($logfile);
}

function search_it($query){
	$ch = curl_init();
	$host = 'localhost:9200';
	if($socket =@ fsockopen($host, 9200, $errno, $errstr, 30)) { #checking if the search engine is working and online
		fclose($socket);
		//echo $query;
		$url = "http://localhost:9200/url-test/_search?pretty";
		$param = "{\"query\" : {\"match_phrase\" : { \"content\" : \"$query\"}},\"highlight\": {\"pre_tags\":[\"<b><i>\"], \"post_tags\":[\"</b></i>\"], \"fields\" : {\"content\" : {}}}}";
		curl_setopt($ch, CURLOPT_URL ,$url);
		curl_setopt($ch, CURLOPT_HEADER, 0);
		curl_setopt($ch, CURLOPT_POSTFIELDS, $param);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
		/*Authentication will be required for POST requests*/
		curl_setopt($ch, CURLOPT_USERPWD, 'elastic:changeme');
		$result = curl_exec($ch);
		//echo print_r($result, true);
		curl_close($ch);
		return $result;
	}
	else {
		echo "Search engine seems offline";
		return "Search engine seems offline";
	}
}

function perform_search() {
    $vars = array();
    $vars['type']="div";
    $vars['title'] = "";
    $vars['attributes']=array("");
    $vars['items'][0]="<form action = \"http://localhost/drupal/?q=elasticsearch/search\"><input type=\"hidden\" name=\"q\" value=\"elasticsearch/search\"></input><input name = \"query\" type = \"Text\" placeholder=\"Enter the query\"> </input><br/><input type = \"submit\"></input></form> <div id = \"search_results\"></div>";
    
    if(array_key_exists('query', $_GET)){
	$test = $_GET['query'];
	$suggestions = suggest($test);
	if (!empty($suggestions)) {
    		print("Do you mean - ");
		print_r(array_values($suggestions));
	} 
    	$data = search_it($_GET['query']);
		
    	$vars['items'][1] = "<script type = 'text/javascript'>
    						var JSDATA = ". json_encode($data, JSON_HEX_TAG | JSON_HEX_AMP ) . ";
    						newVar = JSON.parse(JSDATA);
    						var len = newVar['hits']['hits'].length;
    						var count = 0;
    						var result_data = '';
    						for(count = 0; count < len; count++){
    							result_data += '<a target=\"_blank\" href = \"' + newVar['hits']['hits'][count]['_source']['link'] + '\" ><h2>' + newVar['hits']['hits'][count]['_source']['title'] + '</h2></a>'
    							result_data += '<h3>' + newVar['hits']['hits'][count]['highlight']['content'].slice(0, 500) + '</h3> <br/>'
    						}
				            document.getElementById('search_results').innerHTML = result_data;
				    		</script>";
				    		//due to the JSON structure returned by elasticsearch, the access to e
    }
    //create a search UI
    //input a search query and if input query is available, call 'search_it(query) function and results are then displayed'

    return theme_item_list($vars);
}

//function for spellchecking and sugessions 
function suggest($string)
    {
        $suggestions = array();

        // Suggests possible words in case of misspelling
        $config_dic = pspell_config_create('en');

        // Ignore words under 2 characters
        pspell_config_ignore($config_dic, 2);

        // Configure the dictionary
        pspell_config_mode($config_dic, PSPELL_FAST);
        $dictionary = pspell_new_config($config_dic);

        if (!pspell_check($dictionary, $string)) {
            $suggestions = pspell_suggest($dictionary, $string);
        }

        return $suggestions;
    }

function elasticsearch_search_execute($keys = NULL, $conditions = NULL){
    
    $data = search_it($keys);
    $jdata = json_decode($data, TRUE);
    mylog(print_r($jdata['hits']['hits'], true));
    
    $results = [];
    
    foreach ($jdata['hits']['hits'] as $key => $value) {
            $data = "";
            foreach ($value['highlight']['content'] as $val) {
                $data = $data." ".$val;
            }
            //mylog(print_r($value[$key], true));
            $results[] = array(
                'link' => $value['_source']['link'],
                'type' => 'Article',
                'title' => $value['_source']['title'],
                'user' => NULL,
                'date' => NULL,
                'node' => 'node',
                'extra' => 'date',
                'score' => $value['_score'],
                'snippet' => $data,
            );
        
        
    }
    return $results;
}

function elasticsearch_search_info(){
    
    t('ElasticSearch Info Hook');

    return array(
      'title' => 'Content',
      'path' => 'node',
      'conditions_callback' => 'callback_search_conditions',
    );
}
